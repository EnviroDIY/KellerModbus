{
  "version": "1.11.0",
  "compound": {
    "kind": "class",
    "id": "classkeller",
    "name": "keller",
    "url_base": "classkeller",
    "url": "classkeller.html",
    "include": [
      "&lt;src/KellerModbus.h&gt;",
      "_keller_modbus_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The class for communicating with Keller Sensors.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "modules": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [
      {
        "base_url": "classkeller.html",
        "id": "abb0ba1448c0476e6c54d23a7db075cd7",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "begin",
        "brief": "This function sets up the communication.",
        "description": "<p>It should be run during the arduino &quot;setup&quot; function. The &quot;stream&quot; device must be initialized prior to running this.</p>",
        "return_value": "True if the starting communication was successful, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "model",
            "type": "<a href=\"_keller_modbus_8h.html#a9b53ddc43ac5a3d1c5a2309446cbb646\" class=\"m-doc\">kellerModel</a>",
            "type_name": "<a href=\"_keller_modbus_8h.html#a9b53ddc43ac5a3d1c5a2309446cbb646\" class=\"m-doc\">kellerModel</a> model",
            "default": null,
            "description": "The model of the Keller sensor, from <a href=\"_keller_modbus_8h.html#a9b53ddc43ac5a3d1c5a2309446cbb646\" class=\"m-doc\">kellerModel</a>",
            "direction": ""
          },
          {
            "name": "modbusSlaveID",
            "type": "byte",
            "type_name": "byte modbusSlaveID",
            "default": null,
            "description": "The byte identifier of the modbus slave device.",
            "direction": ""
          },
          {
            "name": "stream",
            "type": "Stream*",
            "type_name": "Stream* stream",
            "default": null,
            "description": "A pointer to the Arduino stream object to communicate with.",
            "direction": ""
          },
          {
            "name": "enablePin",
            "type": "int",
            "type_name": "int enablePin",
            "default": "-1",
            "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply. Optional with a default value of -1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classkeller.html",
        "id": "a030aaaa30f4ad7efc62df020ce67d0b9",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "begin",
        "brief": "This function sets up the communication.",
        "description": "<p>It should be run during the arduino &quot;setup&quot; function. The &quot;stream&quot; device must be initialized prior to running this.</p>",
        "return_value": "True if the starting communication was successful, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "model",
            "type": "<a href=\"_keller_modbus_8h.html#a9b53ddc43ac5a3d1c5a2309446cbb646\" class=\"m-doc\">kellerModel</a>",
            "type_name": "<a href=\"_keller_modbus_8h.html#a9b53ddc43ac5a3d1c5a2309446cbb646\" class=\"m-doc\">kellerModel</a> model",
            "default": null,
            "description": "The model of the Keller sensor, from <a href=\"_keller_modbus_8h.html#a9b53ddc43ac5a3d1c5a2309446cbb646\" class=\"m-doc\">kellerModel</a>",
            "direction": ""
          },
          {
            "name": "modbusSlaveID",
            "type": "byte",
            "type_name": "byte modbusSlaveID",
            "default": null,
            "description": "The byte identifier of the modbus slave device.",
            "direction": ""
          },
          {
            "name": "stream",
            "type": "Stream&amp;",
            "type_name": "Stream&amp; stream",
            "default": null,
            "description": "A reference to the Arduino stream object to communicate with.",
            "direction": ""
          },
          {
            "name": "enablePin",
            "type": "int",
            "type_name": "int enablePin",
            "default": "-1",
            "description": "A pin on the Arduino processor to use to send an enable signal to an RS485 to TTL adapter. Use a negative number if this does not apply. Optional with a default value of -1.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classkeller.html",
        "id": "ac910175c3a9451d1cbdf078ab03b0b4c",
        "include": null,
        "has_details": true,
        "type": "byte",
        "name": "getSlaveID",
        "brief": "Gets the modbus slave ID.",
        "description": "<p>For Keller, slaveID is in register 0x020D (525), or regNum = 0x020D regType = 0x03 for all Keller Modbus Register Read functions</p><aside class=\"m-note m-danger\"><h4>Warning</h4><p>NOT YET WORKING</p></aside>",
        "return_value": "The slave id of the Keller sensor",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classkeller.html",
        "id": "a25f5d5ad079c6befd38555613fd530b1",
        "include": null,
        "has_details": true,
        "type": "long",
        "name": "getSerialNumber",
        "brief": "Get the instrument serial number as a 32-bit signed integer (as specified by Keller).",
        "description": "<p>For Keller, Serial number is in holding registers 0x0202 and 0x0203 (2304) and occupies 4 registers (8 characters)</p>",
        "return_value": "The instrument serial number",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classkeller.html",
        "id": "aaafcd810c87ca780f8e93e6fb2d4134e",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "getValues",
        "brief": "Get values from the sensor.",
        "description": "<p>Uses Keller Process Value Read Range (0x0100) 32bit floating point, which is Same as 0x0000 .. 0x000B but different mapping for accessing data in one cycle (e.g. P1 and TOB1) P1 is in register 0x0100 &amp; TOB1 (Temperature of sensor1) is in 0x0102</p>",
        "return_value": "True if the values were successfully updated, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "valueP1",
            "type": "float&amp;",
            "type_name": "float&amp; valueP1",
            "default": null,
            "description": "A reference to a float object to be modified with the pressure value.",
            "direction": ""
          },
          {
            "name": "valueTOB1",
            "type": "float&amp;",
            "type_name": "float&amp; valueTOB1",
            "default": null,
            "description": "A reference to a float object to be modified with the temperature value.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classkeller.html",
        "id": "a7787e19f795fbf1ea18af133a4579a0f",
        "include": null,
        "has_details": true,
        "type": "bool",
        "name": "getValueLastTempC",
        "brief": "Get the previously fetched temperature value without communicating with the sensor.",
        "description": "",
        "return_value": "True if the previous temperature value was successfully updated, false if not.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "value",
            "type": "float&amp;",
            "type_name": "float&amp; value",
            "default": null,
            "description": "A reference to a float object to be modified with the previous temperature value.",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classkeller.html",
        "id": "ac5d5db1bb986109ef529e0ca566c8b2c",
        "include": null,
        "has_details": true,
        "type": "float",
        "name": "calcWaterDepthM",
        "brief": "Calculates water depth based on water pressure and temperature.",
        "description": "<p>Initialize variables</p>",
        "return_value": "The water depth in meters.",
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "waterPressureBar",
            "type": "float&amp;",
            "type_name": "float&amp; waterPressureBar",
            "default": null,
            "description": "The pressure of the water in bar. This value should be acquired with <a href=\"classkeller.html#aaafcd810c87ca780f8e93e6fb2d4134e\" class=\"m-doc\">keller::<wbr />getValues(float&amp; valueP1, float&amp; valueTOB1)</a>",
            "direction": ""
          },
          {
            "name": "waterTempertureC",
            "type": "float&amp;",
            "type_name": "float&amp; waterTempertureC",
            "default": null,
            "description": "The temperature of the water in degrees celsius. This value should be acquired with <a href=\"classkeller.html#aaafcd810c87ca780f8e93e6fb2d4134e\" class=\"m-doc\">keller::<wbr />getValues(float&amp; valueP1, float&amp; valueTOB1)</a>",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classkeller.html",
        "id": "a708dcd2b384bbf1c4a28359d4a7943ab",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setDebugStream",
        "brief": "Set a stream for debugging information to go to.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "stream",
            "type": "Stream*",
            "type_name": "Stream* stream",
            "default": null,
            "description": "An Arduino stream object",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classkeller.html",
        "id": "a331300ae94ca682454ce7814b69a12b3",
        "include": null,
        "has_details": true,
        "type": "void",
        "name": "setDebugStream",
        "brief": "Set a stream for debugging information to go to.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": true,
        "params": [
          {
            "name": "stream",
            "type": "Stream&amp;",
            "type_name": "Stream&amp; stream",
            "default": null,
            "description": "An Arduino stream object",
            "direction": ""
          }
        ]
      },
      {
        "base_url": "classkeller.html",
        "id": "aff75779c4f96f6084fe2db7baab5a3f2",
        "include": null,
        "has_details": false,
        "type": "void",
        "name": "stopDebugging",
        "brief": "Un-set the stream for debugging information to go to; stop debugging.",
        "description": "",
        "return_value": null,
        "return_values": [],
        "exceptions": [],
        "deprecated": null,
        "since": null,
        "is_constexpr": false,
        "is_consteval": false,
        "is_explicit": false,
        "is_virtual": false,
        "prefix": "",
        "is_defaulted": false,
        "is_deleted": false,
        "is_pure_virtual": false,
        "is_final": false,
        "is_override": false,
        "is_noexcept": false,
        "is_conditional_noexcept": false,
        "suffix": "",
        "is_protected": false,
        "is_private": false,
        "is_signal": false,
        "is_slot": false,
        "has_template_details": false,
        "templates": null,
        "has_param_details": false,
        "params": [
          {
            "name": "",
            "type": "void",
            "type_name": "void",
            "default": null,
            "description": "",
            "direction": ""
          }
        ]
      }
    ],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": false,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": false,
    "has_define_details": false,
    "breadcrumb": [
      [
        "keller",
        "classkeller.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "keller",
        "classkeller.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "keller::<wbr />"
  }
}